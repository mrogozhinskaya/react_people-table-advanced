{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","sex","get","centuries","getAll","query","type","placeholder","onChange","e","event","target","handleQuery","map","century","includes","filter","c","Loader","PeopleTable","people","Slug","sort","order","sortParams","param","personLink","person","name","slug","born","died","mother","motherName","father","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","peopleOnServer","find","pers","PeoplePage","useState","setPeople","loading","setLoading","error","setError","useParams","useEffect","getPeople","preparedPeople","catch","finally","trim","toLocaleLowerCase","prepared","elem","toLowerCase","length","Math","ceil","a","b","localeCompare","reverse","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.40b4bbe1.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => cn(\n  'navbar-item', { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { ChangeEvent } from 'react';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const centuriesList = ['16', '17', '18', '19', '20'];\n\n  const sex = searchParams.get('sex');\n  const centuries = searchParams.getAll('centuries');\n  const query = searchParams.get('query') || '';\n\n  function handleQuery(event: ChangeEvent<HTMLInputElement>) {\n    const params = (event.target.value === '')\n      ? getSearchWith(searchParams, { query: null })\n      : getSearchWith(searchParams, { query: event.target.value });\n\n    setSearchParams(params);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={cn({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={cn({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={cn({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={e => handleQuery(e)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesList.map(century => (\n              <SearchLink\n                key={century}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(c => c !== century)\n                    : [...centuries, century],\n                }}\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useSearchParams, Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\nimport { Person } from '../types';\n\ntype Props = {\n  people: Person[];\n  Slug?: string;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, Slug }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const sortParams = (param: string) => {\n    if (sort !== param) {\n      return {\n        sort: param,\n        order: null,\n      };\n    }\n\n    if (sort === param && order !== 'desc') {\n      return { order: 'desc' };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  const personLink = (person: Person) => {\n    const { name, sex, slug } = person;\n\n    return (\n      <Link\n        to={`/people/${slug}`}\n        className={cn({ 'has-text-danger': sex === 'f' })}\n      >\n        {name}\n      </Link>\n    );\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={sortParams('name') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'name' && !order,\n                    'fa-sort-down': sort === 'name' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={sortParams('sex') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'sex' && !order,\n                    'fa-sort-down': sort === 'sex' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={sortParams('born') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'born' && !order,\n                    'fa-sort-down': sort === 'born' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={sortParams('died') as SearchParams}\n              >\n                <span className=\"icon\">\n                  <i className={cn('fas fa-sort', {\n                    'fa-sort-up': sort === 'died' && !order,\n                    'fa-sort-down': sort === 'died' && order,\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={cn({\n                'has-background-warning': person.slug === Slug,\n              })}\n            >\n              <td>\n                {personLink(person)}\n              </td>\n\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {person.mother\n                  ? personLink(person.mother)\n                  : person.motherName || '-'}\n              </td>\n              <td>\n                {person.father\n                  ? personLink(person.father)\n                  : person.fatherName || '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nconst peopleOnServer = (people: Person[]) => {\n  return people.map(person => {\n    const mother = people.find(pers => pers.name === person.motherName);\n    const father = people.find(pers => pers.name === person.fatherName);\n\n    return ({\n      ...person,\n      mother,\n      father,\n    });\n  });\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const { slug } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    getPeople()\n      .then(peopleOnServer)\n      .then(preparedPeople => setPeople(preparedPeople))\n      .catch(() => setError(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  const preparedPeople = () => {\n    const sort = searchParams.get('sort');\n    const order = searchParams.get('order');\n    const sex = searchParams.get('sex');\n    const query = searchParams.get('query')?.trim().toLocaleLowerCase();\n    const centuries = searchParams.getAll('centuries');\n    let prepared = [...people];\n\n    if (query) {\n      prepared = prepared.filter(elem => elem.name.toLowerCase()\n        .includes(query)\n        || elem.motherName?.toLowerCase().includes(query)\n        || elem.fatherName?.toLowerCase().includes(query));\n    }\n\n    if (sex) {\n      prepared = prepared.filter(elem => elem.sex === sex);\n    }\n\n    if (centuries && centuries.length > 0) {\n      prepared = prepared.filter(elem => (\n        centuries?.includes(Math.ceil(elem.born / 100).toString())));\n    }\n\n    if (sort) {\n      switch (sort) {\n        case 'name':\n        {\n          prepared.sort((a, b) => a.name.localeCompare(b.name));\n          break;\n        }\n\n        case 'sex':\n        {\n          prepared.sort((a, b) => a.sex.localeCompare(b.sex));\n          break;\n        }\n\n        case 'born': {\n          prepared.sort((a, b) => a.born - b.born);\n          break;\n        }\n\n        case 'died': {\n          prepared.sort((a, b) => a.died - b.died);\n          break;\n        }\n\n        default:\n      }\n    }\n\n    if (order) {\n      prepared.reverse();\n    }\n\n    return prepared;\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && (\n                <Loader />\n              )}\n\n              {error && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!loading && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {(!preparedPeople().length && !loading) && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {people.length > 0 && (\n                <PeopleTable people={preparedPeople()} Slug={slug} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<h1 className=\"title\">Home Page</h1>} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n\n        <Route\n          path=\"*\"\n          element={\n            <h1 className=\"title\">Page not found</h1>\n          }\n        />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}